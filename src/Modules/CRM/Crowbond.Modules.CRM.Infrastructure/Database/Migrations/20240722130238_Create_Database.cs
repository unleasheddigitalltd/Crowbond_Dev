// <auto-generated />
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Crowbond.Modules.CRM.Infrastructure.Database.Migrations;

/// <inheritdoc />
public partial class Create_Database : Migration
{
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.EnsureSchema(
            name: "crm");

        migrationBuilder.CreateTable(
            name: "categories",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                is_archived = table.Column<bool>(type: "boolean", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_categories", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "customer_outlet_routes",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_outlet_id = table.Column<Guid>(type: "uuid", nullable: false),
                route_id = table.Column<Guid>(type: "uuid", nullable: false),
                days_of_week = table.Column<string>(type: "CHAR(7)", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customer_outlet_routes", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "inbox_message_consumers",
            schema: "crm",
            columns: table => new
            {
                inbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_message_consumers", x => new { x.inbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "inbox_messages",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "outbox_message_consumers",
            schema: "crm",
            columns: table => new
            {
                outbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_message_consumers", x => new { x.outbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "outbox_messages",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "price_tiers",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_price_tiers", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "reps",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_reps", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "routes",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                position = table.Column<int>(type: "integer", nullable: false),
                cut_off_time = table.Column<TimeOnly>(type: "time without time zone", nullable: false),
                is_active = table.Column<bool>(type: "boolean", nullable: false),
                days_of_week = table.Column<string>(type: "CHAR(7)", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_routes", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "sequences",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                context = table.Column<int>(type: "integer", nullable: false),
                last_number = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_sequences", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "suppliers",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                account_number = table.Column<string>(type: "text", nullable: false),
                supplier_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                address_line1 = table.Column<string>(type: "text", nullable: false),
                address_line2 = table.Column<string>(type: "text", nullable: true),
                address_town_city = table.Column<string>(type: "text", nullable: false),
                address_county = table.Column<string>(type: "text", nullable: false),
                address_country = table.Column<string>(type: "text", nullable: true),
                address_postal_code = table.Column<string>(type: "text", nullable: false),
                billing_address_line1 = table.Column<string>(type: "text", nullable: false),
                billing_address_line2 = table.Column<string>(type: "text", nullable: true),
                billing_address_town_city = table.Column<string>(type: "text", nullable: false),
                billing_address_county = table.Column<string>(type: "text", nullable: false),
                billing_address_country = table.Column<string>(type: "text", nullable: true),
                billing_address_postal_code = table.Column<string>(type: "text", nullable: false),
                supplier_email = table.Column<string>(type: "text", nullable: false),
                supplier_phone = table.Column<string>(type: "text", nullable: false),
                supplier_contact = table.Column<string>(type: "text", nullable: false),
                payment_terms = table.Column<int>(type: "integer", nullable: false),
                supplier_notes = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_suppliers", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "products",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                sku = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                unit_of_measure_name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                category_id = table.Column<Guid>(type: "uuid", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_products", x => x.id);
                table.ForeignKey(
                    name: "fk_products_categories_category_id",
                    column: x => x.category_id,
                    principalSchema: "crm",
                    principalTable: "categories",
                    principalColumn: "id");
            });

        migrationBuilder.CreateTable(
            name: "customers",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                account_number = table.Column<string>(type: "character varying(16)", maxLength: 16, nullable: false),
                business_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                billing_address_line1 = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                billing_address_line2 = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                billing_town_city = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                billing_county = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                billing_country = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                billing_postal_code = table.Column<string>(type: "character varying(16)", maxLength: 16, nullable: false),
                price_tier_id = table.Column<Guid>(type: "uuid", nullable: false),
                discount = table.Column<decimal>(type: "numeric(5,2)", precision: 5, scale: 2, nullable: false),
                rep_id = table.Column<Guid>(type: "uuid", nullable: true),
                custom_payment_term = table.Column<bool>(type: "boolean", nullable: false),
                payment_terms = table.Column<int>(type: "integer", nullable: true),
                invoice_due_days = table.Column<int>(type: "integer", nullable: true),
                delivery_fee_setting = table.Column<int>(type: "integer", nullable: false),
                delivery_min_order_value = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: true),
                delivery_charge = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: true),
                no_discount_special_item = table.Column<bool>(type: "boolean", nullable: false),
                no_discount_fixed_price = table.Column<bool>(type: "boolean", nullable: false),
                show_prices_in_delivery_docket = table.Column<bool>(type: "boolean", nullable: false),
                show_price_in_app = table.Column<bool>(type: "boolean", nullable: false),
                detailed_invoice = table.Column<bool>(type: "boolean", nullable: false),
                customer_notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                is_hq = table.Column<bool>(type: "boolean", nullable: false),
                is_active = table.Column<bool>(type: "boolean", nullable: false),
                create_by = table.Column<Guid>(type: "uuid", nullable: false),
                create_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                last_modified_by = table.Column<Guid>(type: "uuid", nullable: true),
                last_modified_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customers", x => x.id);
                table.ForeignKey(
                    name: "fk_customers_reps_rep_id",
                    column: x => x.rep_id,
                    principalSchema: "crm",
                    principalTable: "reps",
                    principalColumn: "id");
            });

        migrationBuilder.CreateTable(
            name: "product_prices",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                price_tier_id = table.Column<Guid>(type: "uuid", nullable: false),
                base_purchase_price = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                sale_price = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                effective_date = table.Column<DateOnly>(type: "date", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_product_prices", x => x.id);
                table.ForeignKey(
                    name: "fk_product_prices_price_tiers_price_tier_id",
                    column: x => x.price_tier_id,
                    principalSchema: "crm",
                    principalTable: "price_tiers",
                    principalColumn: "id");
                table.ForeignKey(
                    name: "fk_product_prices_products_product_id",
                    column: x => x.product_id,
                    principalSchema: "crm",
                    principalTable: "products",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "customer_contacts",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_id = table.Column<Guid>(type: "uuid", nullable: false),
                first_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                last_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                phone_number = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                mobile = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                username = table.Column<string>(type: "character varying(128)", maxLength: 128, nullable: false),
                email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                primary = table.Column<bool>(type: "boolean", nullable: false),
                receive_invoice = table.Column<bool>(type: "boolean", nullable: false),
                receive_order = table.Column<bool>(type: "boolean", nullable: false),
                receive_price_list = table.Column<bool>(type: "boolean", nullable: false),
                is_active = table.Column<bool>(type: "boolean", nullable: false),
                create_by = table.Column<Guid>(type: "uuid", nullable: false),
                create_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                last_modified_by = table.Column<Guid>(type: "uuid", nullable: true),
                last_modified_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customer_contacts", x => x.id);
                table.ForeignKey(
                    name: "fk_customer_contacts_customers_customer_id",
                    column: x => x.customer_id,
                    principalSchema: "crm",
                    principalTable: "customers",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "customer_outlets",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_id = table.Column<Guid>(type: "uuid", nullable: false),
                location_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                full_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                email = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                phone_number = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                mobile = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: true),
                address_line1 = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                address_line2 = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                town_city = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                county = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                country = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                postal_code = table.Column<string>(type: "character varying(16)", maxLength: 16, nullable: false),
                delivery_note = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                delivery_time_from = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                delivery_time_to = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                is24hrs_delivery = table.Column<bool>(type: "boolean", nullable: false),
                create_by = table.Column<Guid>(type: "uuid", nullable: false),
                create_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                last_modified_by = table.Column<Guid>(type: "uuid", nullable: true),
                last_modified_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customer_outlets", x => x.id);
                table.ForeignKey(
                    name: "fk_customer_outlets_customers_customer_id",
                    column: x => x.customer_id,
                    principalSchema: "crm",
                    principalTable: "customers",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "customer_products",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_id = table.Column<Guid>(type: "uuid", nullable: false),
                is_active = table.Column<bool>(type: "boolean", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customer_products", x => x.id);
                table.ForeignKey(
                    name: "fk_customer_products_customers_customer_id",
                    column: x => x.customer_id,
                    principalSchema: "crm",
                    principalTable: "customers",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_customer_products_products_product_id",
                    column: x => x.product_id,
                    principalSchema: "crm",
                    principalTable: "products",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "recipients",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_contact_id = table.Column<Guid>(type: "uuid", nullable: false),
                recipient_type = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_recipients", x => x.id);
                table.ForeignKey(
                    name: "fk_recipients_customer_contacts_customer_contact_id",
                    column: x => x.customer_contact_id,
                    principalSchema: "crm",
                    principalTable: "customer_contacts",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "customer_product_prices",
            schema: "crm",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                customer_product_id = table.Column<Guid>(type: "uuid", nullable: false),
                fixed_price = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: true),
                fixed_discount = table.Column<decimal>(type: "numeric(5,2)", precision: 5, scale: 2, nullable: true),
                comment = table.Column<string>(type: "text", nullable: true),
                effective_date = table.Column<DateOnly>(type: "date", nullable: false),
                expiry_date = table.Column<DateOnly>(type: "date", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_customer_product_prices", x => x.id);
                table.ForeignKey(
                    name: "fk_customer_product_prices_customer_products_customer_product_",
                    column: x => x.customer_product_id,
                    principalSchema: "crm",
                    principalTable: "customer_products",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateIndex(
            name: "ix_customer_contacts_customer_id",
            schema: "crm",
            table: "customer_contacts",
            column: "customer_id");

        migrationBuilder.CreateIndex(
            name: "ix_customer_contacts_email",
            schema: "crm",
            table: "customer_contacts",
            column: "email",
            unique: true);

        migrationBuilder.CreateIndex(
            name: "ix_customer_contacts_username",
            schema: "crm",
            table: "customer_contacts",
            column: "username",
            unique: true);

        migrationBuilder.CreateIndex(
            name: "ix_customer_outlets_customer_id",
            schema: "crm",
            table: "customer_outlets",
            column: "customer_id");

        migrationBuilder.CreateIndex(
            name: "ix_customer_product_prices_customer_product_id",
            schema: "crm",
            table: "customer_product_prices",
            column: "customer_product_id");

        migrationBuilder.CreateIndex(
            name: "ix_customer_products_customer_id_product_id",
            schema: "crm",
            table: "customer_products",
            columns: new[] { "customer_id", "product_id" },
            unique: true);

        migrationBuilder.CreateIndex(
            name: "ix_customer_products_product_id",
            schema: "crm",
            table: "customer_products",
            column: "product_id");

        migrationBuilder.CreateIndex(
            name: "ix_customers_rep_id",
            schema: "crm",
            table: "customers",
            column: "rep_id");

        migrationBuilder.CreateIndex(
            name: "ix_product_prices_price_tier_id",
            schema: "crm",
            table: "product_prices",
            column: "price_tier_id");

        migrationBuilder.CreateIndex(
            name: "ix_product_prices_product_id",
            schema: "crm",
            table: "product_prices",
            column: "product_id");

        migrationBuilder.CreateIndex(
            name: "ix_products_category_id",
            schema: "crm",
            table: "products",
            column: "category_id");

        migrationBuilder.CreateIndex(
            name: "ix_recipients_customer_contact_id",
            schema: "crm",
            table: "recipients",
            column: "customer_contact_id");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropTable(
            name: "customer_outlet_routes",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "customer_outlets",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "customer_product_prices",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "inbox_message_consumers",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "inbox_messages",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "outbox_message_consumers",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "outbox_messages",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "product_prices",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "recipients",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "routes",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "sequences",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "suppliers",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "customer_products",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "price_tiers",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "customer_contacts",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "products",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "customers",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "categories",
            schema: "crm");

        migrationBuilder.DropTable(
            name: "reps",
            schema: "crm");
    }
}
