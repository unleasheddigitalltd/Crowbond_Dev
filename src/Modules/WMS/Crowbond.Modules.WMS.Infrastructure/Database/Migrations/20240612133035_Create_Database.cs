// <auto-generated />
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Crowbond.Modules.WMS.Infrastructure.Database.Migrations;

/// <inheritdoc />
public partial class Create_Database : Migration
{
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.EnsureSchema(
            name: "wms");

        migrationBuilder.CreateTable(
            name: "action_types",
            schema: "wms",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_action_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "categories",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                is_archived = table.Column<bool>(type: "boolean", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_categories", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "filter_types",
            schema: "wms",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_filter_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "inbox_message_consumers",
            schema: "wms",
            columns: table => new
            {
                inbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_message_consumers", x => new { x.inbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "inbox_messages",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "inventory_types",
            schema: "wms",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inventory_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "locations",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                status = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_locations", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "outbox_message_consumers",
            schema: "wms",
            columns: table => new
            {
                outbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_message_consumers", x => new { x.outbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "outbox_messages",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "receipt_headers",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                received_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                purchase_order_id = table.Column<Guid>(type: "uuid", nullable: false),
                deivary_note_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                status = table.Column<int>(type: "integer", nullable: false),
                createtime_stamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_receipt_headers", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "task_types",
            schema: "wms",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_task_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "unit_of_measures",
            schema: "wms",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_unit_of_measures", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "receipt_lines",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                receipt_header_id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                quantity_received = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                unit_price = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                sell_by_date = table.Column<DateOnly>(type: "date", nullable: true),
                use_by_date = table.Column<DateOnly>(type: "date", nullable: true),
                batch_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_receipt_lines", x => x.id);
                table.ForeignKey(
                    name: "fk_receipt_lines_receipt_headers_receipt_header_id",
                    column: x => x.receipt_header_id,
                    principalSchema: "wms",
                    principalTable: "receipt_headers",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "tasks",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                user_id = table.Column<Guid>(type: "uuid", nullable: false),
                task_type_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_tasks", x => x.id);
                table.ForeignKey(
                    name: "fk_tasks_task_types_task_type_name",
                    column: x => x.task_type_name,
                    principalSchema: "wms",
                    principalTable: "task_types",
                    principalColumn: "name",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "products",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                sku = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                parent_id = table.Column<Guid>(type: "uuid", nullable: true),
                filter_type_name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                unit_of_measure_name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                category_id = table.Column<Guid>(type: "uuid", nullable: false),
                inventory_type_name = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                barcode = table.Column<int>(type: "integer", nullable: true),
                pack_size = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: true),
                handling_notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                qi_check = table.Column<bool>(type: "boolean", nullable: false),
                notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                reorder_level = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: true),
                height = table.Column<decimal>(type: "numeric(19,0)", precision: 19, scale: 0, nullable: true),
                width = table.Column<decimal>(type: "numeric(19,0)", precision: 19, scale: 0, nullable: true),
                length = table.Column<decimal>(type: "numeric(19,0)", precision: 19, scale: 0, nullable: true),
                weight_input = table.Column<bool>(type: "boolean", nullable: false),
                active = table.Column<bool>(type: "boolean", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_products", x => x.id);
                table.ForeignKey(
                    name: "fk_products_categories_category_id",
                    column: x => x.category_id,
                    principalSchema: "wms",
                    principalTable: "categories",
                    principalColumn: "id");
                table.ForeignKey(
                    name: "fk_products_filter_types_filter_type_name",
                    column: x => x.filter_type_name,
                    principalSchema: "wms",
                    principalTable: "filter_types",
                    principalColumn: "name");
                table.ForeignKey(
                    name: "fk_products_inventory_types_inventory_type_name",
                    column: x => x.inventory_type_name,
                    principalSchema: "wms",
                    principalTable: "inventory_types",
                    principalColumn: "name");
                table.ForeignKey(
                    name: "fk_products_products_parent_id",
                    column: x => x.parent_id,
                    principalSchema: "wms",
                    principalTable: "products",
                    principalColumn: "id",
                    onDelete: ReferentialAction.SetNull);
                table.ForeignKey(
                    name: "fk_products_unit_of_measures_unit_of_measure_name",
                    column: x => x.unit_of_measure_name,
                    principalSchema: "wms",
                    principalTable: "unit_of_measures",
                    principalColumn: "name");
            });

        migrationBuilder.CreateTable(
            name: "stocks",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                location_id = table.Column<Guid>(type: "uuid", nullable: false),
                original_qty = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                current_qty = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                batch_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                received_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                sell_by_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                use_by_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                receipt_id = table.Column<Guid>(type: "uuid", nullable: false),
                note = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                status = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_stocks", x => x.id);
                table.ForeignKey(
                    name: "fk_stocks_locations_location_id",
                    column: x => x.location_id,
                    principalSchema: "wms",
                    principalTable: "locations",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stocks_receipt_lines_receipt_id",
                    column: x => x.receipt_id,
                    principalSchema: "wms",
                    principalTable: "receipt_lines",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "stock_transactions",
            schema: "wms",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                task_id = table.Column<Guid>(type: "uuid", nullable: false),
                action_type_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                pos_adjustment = table.Column<bool>(type: "boolean", nullable: false),
                transaction_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                transaction_note = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                quantity = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                stock_id = table.Column<Guid>(type: "uuid", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_stock_transactions", x => x.id);
                table.ForeignKey(
                    name: "fk_stock_transactions_action_types_action_type_name",
                    column: x => x.action_type_name,
                    principalSchema: "wms",
                    principalTable: "action_types",
                    principalColumn: "name",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stock_transactions_stocks_stock_id",
                    column: x => x.stock_id,
                    principalSchema: "wms",
                    principalTable: "stocks",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stock_transactions_tasks_task_id",
                    column: x => x.task_id,
                    principalSchema: "wms",
                    principalTable: "tasks",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.InsertData(
            schema: "wms",
            table: "filter_types",
            column: "name",
            values: new object[]
            {
                "Box",
                "Case",
                "Each",
                "Kg",
                "Processed"
            });

        migrationBuilder.InsertData(
            schema: "wms",
            table: "inventory_types",
            column: "name",
            values: new object[]
            {
                "Exclusive",
                "Standard"
            });

        migrationBuilder.InsertData(
            schema: "wms",
            table: "unit_of_measures",
            column: "name",
            values: new object[]
            {
                "Bag",
                "Box",
                "Each",
                "Kg",
                "Pack"
            });

        migrationBuilder.CreateIndex(
            name: "ix_products_category_id",
            schema: "wms",
            table: "products",
            column: "category_id");

        migrationBuilder.CreateIndex(
            name: "ix_products_filter_type_name",
            schema: "wms",
            table: "products",
            column: "filter_type_name");

        migrationBuilder.CreateIndex(
            name: "ix_products_inventory_type_name",
            schema: "wms",
            table: "products",
            column: "inventory_type_name");

        migrationBuilder.CreateIndex(
            name: "ix_products_parent_id",
            schema: "wms",
            table: "products",
            column: "parent_id");

        migrationBuilder.CreateIndex(
            name: "ix_products_unit_of_measure_name",
            schema: "wms",
            table: "products",
            column: "unit_of_measure_name");

        migrationBuilder.CreateIndex(
            name: "ix_receipt_lines_receipt_header_id",
            schema: "wms",
            table: "receipt_lines",
            column: "receipt_header_id");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_action_type_name",
            schema: "wms",
            table: "stock_transactions",
            column: "action_type_name");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_stock_id",
            schema: "wms",
            table: "stock_transactions",
            column: "stock_id");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_task_id",
            schema: "wms",
            table: "stock_transactions",
            column: "task_id");

        migrationBuilder.CreateIndex(
            name: "ix_stocks_location_id",
            schema: "wms",
            table: "stocks",
            column: "location_id");

        migrationBuilder.CreateIndex(
            name: "ix_stocks_receipt_id",
            schema: "wms",
            table: "stocks",
            column: "receipt_id");

        migrationBuilder.CreateIndex(
            name: "ix_tasks_task_type_name",
            schema: "wms",
            table: "tasks",
            column: "task_type_name");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropTable(
            name: "inbox_message_consumers",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "inbox_messages",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "outbox_message_consumers",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "outbox_messages",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "products",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "stock_transactions",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "categories",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "filter_types",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "inventory_types",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "unit_of_measures",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "action_types",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "stocks",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "tasks",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "locations",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "receipt_lines",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "task_types",
            schema: "wms");

        migrationBuilder.DropTable(
            name: "receipt_headers",
            schema: "wms");
    }
}
