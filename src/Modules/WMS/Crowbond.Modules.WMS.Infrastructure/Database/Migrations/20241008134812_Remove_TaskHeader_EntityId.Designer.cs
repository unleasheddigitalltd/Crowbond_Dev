// <auto-generated />
using System;
using Crowbond.Modules.WMS.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crowbond.Modules.WMS.Infrastructure.Database.Migrations
{
    [DbContext(typeof(WmsDbContext))]
    [Migration("20241008134812_Remove_TaskHeader_EntityId")]
    partial class Remove_TaskHeader_EntityId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wms")
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "wms");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "wms");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "wms");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Dispatches.DispatchHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DispatchNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dispatch_no");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on_utc");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("order_id");

                    b.Property<string>("OrderNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("order_no");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_dispatch_headers");

                    b.ToTable("dispatch_headers", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Dispatches.DispatchLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("DispatchHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispatch_header_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Qty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("qty");

                    b.HasKey("Id")
                        .HasName("pk_dispatch_lines");

                    b.HasIndex("DispatchHeaderId")
                        .HasDatabaseName("ix_dispatch_lines_dispatch_header_id");

                    b.ToTable("dispatch_lines", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("LocationLayer")
                        .HasColumnType("integer")
                        .HasColumnName("location_layer");

                    b.Property<int?>("LocationType")
                        .HasColumnType("integer")
                        .HasColumnName("location_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_locations_parent_id");

                    b.ToTable("locations", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_brands");

                    b.ToTable("brands", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.FilterType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_filter_types");

                    b.ToTable("filter_types", "wms");

                    b.HasData(
                        new
                        {
                            Name = "Case"
                        },
                        new
                        {
                            Name = "Box"
                        },
                        new
                        {
                            Name = "Each"
                        },
                        new
                        {
                            Name = "Kg"
                        },
                        new
                        {
                            Name = "Processed"
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.InventoryType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_inventory_types");

                    b.ToTable("inventory_types", "wms");

                    b.HasData(
                        new
                        {
                            Name = "Exclusive"
                        },
                        new
                        {
                            Name = "Standard"
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int?>("Barcode")
                        .HasColumnType("integer")
                        .HasColumnName("barcode");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid")
                        .HasColumnName("brand_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("FilterTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("filter_type_name");

                    b.Property<string>("HandlingNotes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("handling_notes");

                    b.Property<decimal?>("Height")
                        .HasPrecision(19)
                        .HasColumnType("numeric(19,0)")
                        .HasColumnName("height");

                    b.Property<string>("InventoryTypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("inventory_type_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<decimal?>("Length")
                        .HasPrecision(19)
                        .HasColumnType("numeric(19,0)")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<decimal?>("PackSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("pack_size");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_group_id");

                    b.Property<bool>("QiCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("qi_check");

                    b.Property<decimal?>("ReorderLevel")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("reorder_level");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sku");

                    b.Property<int>("TaxRateType")
                        .HasColumnType("integer")
                        .HasColumnName("tax_rate_type");

                    b.Property<string>("UnitOfMeasureName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit_of_measure_name");

                    b.Property<bool>("WeightInput")
                        .HasColumnType("boolean")
                        .HasColumnName("weight_input");

                    b.Property<decimal?>("Width")
                        .HasPrecision(19)
                        .HasColumnType("numeric(19,0)")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("BrandId")
                        .HasDatabaseName("ix_products_brand_id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("FilterTypeName")
                        .HasDatabaseName("ix_products_filter_type_name");

                    b.HasIndex("InventoryTypeName")
                        .HasDatabaseName("ix_products_inventory_type_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_products_parent_id");

                    b.HasIndex("ProductGroupId")
                        .HasDatabaseName("ix_products_product_group_id");

                    b.HasIndex("UnitOfMeasureName")
                        .HasDatabaseName("ix_products_unit_of_measure_name");

                    b.ToTable("products", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_product_groups");

                    b.ToTable("product_groups", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.UnitOfMeasure", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_unit_of_measures");

                    b.ToTable("unit_of_measures", "wms");

                    b.HasData(
                        new
                        {
                            Name = "Bag"
                        },
                        new
                        {
                            Name = "Box"
                        },
                        new
                        {
                            Name = "Each"
                        },
                        new
                        {
                            Name = "Kg"
                        },
                        new
                        {
                            Name = "Pack"
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Receipts.ReceiptHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DeliveryNoteNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("delivery_note_number");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on_utc");

                    b.Property<Guid?>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id");

                    b.Property<string>("PurchaseOrderNo")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("purchase_order_no");

                    b.Property<string>("ReceiptNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("receipt_no");

                    b.Property<DateOnly?>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_receipt_headers");

                    b.ToTable("receipt_headers", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Receipts.ReceiptLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("batch_number");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("QuantityReceived")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity_received");

                    b.Property<Guid>("ReceiptHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_header_id");

                    b.Property<DateOnly?>("SellByDate")
                        .HasColumnType("date")
                        .HasColumnName("sell_by_date");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateOnly?>("UseByDate")
                        .HasColumnType("date")
                        .HasColumnName("use_by_date");

                    b.HasKey("Id")
                        .HasName("pk_receipt_lines");

                    b.HasIndex("ReceiptHeaderId")
                        .HasDatabaseName("ix_receipt_lines_receipt_header_id");

                    b.ToTable("receipt_lines", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Sequences.Sequence", b =>
                {
                    b.Property<int>("Context")
                        .HasColumnType("integer")
                        .HasColumnName("context");

                    b.Property<int>("LastNumber")
                        .HasColumnType("integer")
                        .HasColumnName("last_number");

                    b.Property<string>("Prefix")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("prefix");

                    b.HasKey("Context")
                        .HasName("pk_sequences");

                    b.ToTable("sequences", "wms");

                    b.HasData(
                        new
                        {
                            Context = 0,
                            LastNumber = 10001,
                            Prefix = "RCP"
                        },
                        new
                        {
                            Context = 1,
                            LastNumber = 10001,
                            Prefix = "TSK"
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Settings.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("DeletedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_on_utc");

                    b.Property<bool>("HasMixBatchLocation")
                        .HasColumnType("boolean")
                        .HasColumnName("has_mix_batch_location");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id")
                        .HasName("pk_settings");

                    b.ToTable("settings", "wms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("037b725f-2110-40f8-a1b3-06ca5722cb83"),
                            HasMixBatchLocation = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.ActionType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_action_types");

                    b.ToTable("action_types", "wms");

                    b.HasData(
                        new
                        {
                            Name = "Adjustment"
                        },
                        new
                        {
                            Name = "Relocating"
                        },
                        new
                        {
                            Name = "PutAway"
                        });
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("batch_number");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<decimal>("CurrentQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("current_qty");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on_utc");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<decimal>("OriginalQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("original_qty");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ReceiptLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_line_id");

                    b.Property<DateOnly>("ReceivedDate")
                        .HasColumnType("date")
                        .HasColumnName("received_date");

                    b.Property<DateOnly?>("SellByDate")
                        .HasColumnType("date")
                        .HasColumnName("sell_by_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateOnly?>("UseByDate")
                        .HasColumnType("date")
                        .HasColumnName("use_by_date");

                    b.HasKey("Id")
                        .HasName("pk_stocks");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_stocks_location_id");

                    b.HasIndex("ReceiptLineId")
                        .HasDatabaseName("ix_stocks_receipt_line_id");

                    b.ToTable("stocks", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.StockTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action_type_name");

                    b.Property<bool>("PosAdjustment")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_adjustment");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity");

                    b.Property<Guid?>("ReasonId")
                        .HasColumnType("uuid")
                        .HasColumnName("reason_id");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_id");

                    b.Property<Guid?>("TaskAssignmentLineId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_assignment_line_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transaction_note");

                    b.HasKey("Id")
                        .HasName("pk_stock_transactions");

                    b.HasIndex("ActionTypeName")
                        .HasDatabaseName("ix_stock_transactions_action_type_name");

                    b.HasIndex("ReasonId")
                        .HasDatabaseName("ix_stock_transactions_reason_id");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_stock_transactions_stock_id");

                    b.HasIndex("TaskAssignmentLineId")
                        .HasDatabaseName("ix_stock_transactions_task_assignment_line_id");

                    b.ToTable("stock_transactions", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.StockTransactionReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action_type_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_stock_transaction_reasons");

                    b.HasIndex("ActionTypeName")
                        .HasDatabaseName("ix_stock_transaction_reasons_action_type_name");

                    b.ToTable("stock_transaction_reasons", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AssignedOperatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_operator_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on_utc");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("last_modified_by");

                    b.Property<DateTime?>("LastModifiedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_on_utc");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_header_id");

                    b.HasKey("Id")
                        .HasName("pk_task_assignments");

                    b.HasIndex("AssignedOperatorId")
                        .HasDatabaseName("ix_task_assignments_assigned_operator_id");

                    b.HasIndex("TaskHeaderId")
                        .HasDatabaseName("ix_task_assignments_task_header_id");

                    b.ToTable("task_assignments", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignmentLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("CompletedQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("completed_qty");

                    b.Property<DateTime?>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_time");

                    b.Property<Guid?>("FromLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("from_location_id");

                    b.Property<decimal>("MissedQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("missed_qty");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("RequestedQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("requested_qty");

                    b.Property<DateTime?>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskAssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_assignment_id");

                    b.Property<Guid?>("ToLocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("to_location_id");

                    b.HasKey("Id")
                        .HasName("pk_task_assignment_lines");

                    b.HasIndex("FromLocationId")
                        .HasDatabaseName("ix_task_assignment_lines_from_location_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_task_assignment_lines_product_id");

                    b.HasIndex("TaskAssignmentId")
                        .HasDatabaseName("ix_task_assignment_lines_task_assignment_id");

                    b.HasIndex("ToLocationId")
                        .HasDatabaseName("ix_task_assignment_lines_to_location_id");

                    b.ToTable("task_assignment_lines", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignmentStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("changed_at");

                    b.Property<Guid>("ChangedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("changed_by");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TaskAssignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_assignment_id");

                    b.HasKey("Id")
                        .HasName("pk_task_assignment_status_histories");

                    b.HasIndex("TaskAssignmentId")
                        .HasDatabaseName("ix_task_assignment_status_histories_task_assignment_id");

                    b.ToTable("task_assignment_status_histories", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DispatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("dispatch_id");

                    b.Property<Guid?>("ReceiptId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TaskNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("task_no");

                    b.Property<int>("TaskType")
                        .HasColumnType("integer")
                        .HasColumnName("task_type");

                    b.HasKey("Id")
                        .HasName("pk_task_headers");

                    b.HasIndex("DispatchId")
                        .HasDatabaseName("ix_task_headers_dispatch_id");

                    b.HasIndex("ReceiptId")
                        .HasDatabaseName("ix_task_headers_receipt_id");

                    b.ToTable("task_headers", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.WarehouseOperators.WarehouseOperator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("mobile");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_warehouse_operators");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_warehouse_operators_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_warehouse_operators_username");

                    b.ToTable("warehouse_operators", "wms");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Dispatches.DispatchLine", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Dispatches.DispatchHeader", null)
                        .WithMany("Lines")
                        .HasForeignKey("DispatchHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_lines_dispatch_headers_dispatch_header_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Locations.Location", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_locations_locations_parent_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Products.Product", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.Brand", null)
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_brands_brand_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.FilterType", null)
                        .WithMany()
                        .HasForeignKey("FilterTypeName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_filter_types_filter_type_name");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.InventoryType", null)
                        .WithMany()
                        .HasForeignKey("InventoryTypeName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_inventory_types_inventory_type_name");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_products_parent_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.ProductGroup", null)
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_product_groups_product_group_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.UnitOfMeasure", null)
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureName")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_products_unit_of_measures_unit_of_measure_name");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Receipts.ReceiptLine", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Receipts.ReceiptHeader", null)
                        .WithMany("Lines")
                        .HasForeignKey("ReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_receipt_lines_receipt_headers_receipt_header_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.Stock", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stocks_locations_location_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Receipts.ReceiptLine", null)
                        .WithMany()
                        .HasForeignKey("ReceiptLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stocks_receipt_lines_receipt_line_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.StockTransaction", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Stocks.ActionType", null)
                        .WithMany()
                        .HasForeignKey("ActionTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transactions_action_types_action_type_name");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Stocks.StockTransactionReason", null)
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .HasConstraintName("fk_stock_transactions_stock_transaction_reasons_reason_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Stocks.Stock", null)
                        .WithMany("StockTransactions")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transactions_stocks_stock_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignmentLine", null)
                        .WithMany()
                        .HasForeignKey("TaskAssignmentLineId")
                        .HasConstraintName("fk_stock_transactions_task_assignment_lines_task_assignment_li");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.StockTransactionReason", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Stocks.ActionType", null)
                        .WithMany()
                        .HasForeignKey("ActionTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transaction_reasons_action_types_action_type_name");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignment", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.WarehouseOperators.WarehouseOperator", null)
                        .WithMany()
                        .HasForeignKey("AssignedOperatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignments_warehouse_operators_assigned_operator_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Tasks.TaskHeader", null)
                        .WithMany("Assignments")
                        .HasForeignKey("TaskHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignments_task_headers_task_header_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignmentLine", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("FromLocationId")
                        .HasConstraintName("fk_task_assignment_lines_locations_from_location_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignment_lines_products_product_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignment", null)
                        .WithMany("Lines")
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignment_lines_task_assignments_task_assignment_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .HasConstraintName("fk_task_assignment_lines_locations_to_location_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignmentStatusHistory", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignment", null)
                        .WithMany()
                        .HasForeignKey("TaskAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignment_status_histories_task_assignments_task_assi");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskHeader", b =>
                {
                    b.HasOne("Crowbond.Modules.WMS.Domain.Dispatches.DispatchHeader", null)
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .HasConstraintName("fk_task_headers_dispatch_headers_dispatch_id");

                    b.HasOne("Crowbond.Modules.WMS.Domain.Receipts.ReceiptHeader", null)
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .HasConstraintName("fk_task_headers_receipt_headers_receipt_id");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Dispatches.DispatchHeader", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Receipts.ReceiptHeader", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Stocks.Stock", b =>
                {
                    b.Navigation("StockTransactions");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskAssignment", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Crowbond.Modules.WMS.Domain.Tasks.TaskHeader", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
