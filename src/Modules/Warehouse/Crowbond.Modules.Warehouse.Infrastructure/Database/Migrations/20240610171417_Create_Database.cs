// <auto-generated />
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Crowbond.Modules.Warehouse.Infrastructure.Database.Migrations;

/// <inheritdoc />
public partial class Create_Database : Migration
{
    /// <inheritdoc />
    protected override void Up(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.EnsureSchema(
            name: "warehouse");

        migrationBuilder.CreateTable(
            name: "action_types",
            schema: "warehouse",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_action_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "inbox_message_consumers",
            schema: "warehouse",
            columns: table => new
            {
                inbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_message_consumers", x => new { x.inbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "inbox_messages",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_inbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "locations",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                status = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_locations", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "outbox_message_consumers",
            schema: "warehouse",
            columns: table => new
            {
                outbox_message_id = table.Column<Guid>(type: "uuid", nullable: false),
                name = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_message_consumers", x => new { x.outbox_message_id, x.name });
            });

        migrationBuilder.CreateTable(
            name: "outbox_messages",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                type = table.Column<string>(type: "text", nullable: false),
                content = table.Column<string>(type: "jsonb", maxLength: 2000, nullable: false),
                occurred_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                processed_on_utc = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                error = table.Column<string>(type: "text", nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_outbox_messages", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "receipt_headers",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                received_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                purchase_order_id = table.Column<Guid>(type: "uuid", nullable: false),
                deivary_note_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                status = table.Column<int>(type: "integer", nullable: false),
                createtime_stamp = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_receipt_headers", x => x.id);
            });

        migrationBuilder.CreateTable(
            name: "task_types",
            schema: "warehouse",
            columns: table => new
            {
                name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_task_types", x => x.name);
            });

        migrationBuilder.CreateTable(
            name: "receipt_lines",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                receipt_header_id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                quantity_received = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                unit_price = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                sell_by_date = table.Column<DateOnly>(type: "date", nullable: true),
                use_by_date = table.Column<DateOnly>(type: "date", nullable: true),
                batch_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_receipt_lines", x => x.id);
                table.ForeignKey(
                    name: "fk_receipt_lines_receipt_headers_receipt_header_id",
                    column: x => x.receipt_header_id,
                    principalSchema: "warehouse",
                    principalTable: "receipt_headers",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "tasks",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                user_id = table.Column<Guid>(type: "uuid", nullable: false),
                task_type_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_tasks", x => x.id);
                table.ForeignKey(
                    name: "fk_tasks_task_types_task_type_name",
                    column: x => x.task_type_name,
                    principalSchema: "warehouse",
                    principalTable: "task_types",
                    principalColumn: "name",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "stocks",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                location_id = table.Column<Guid>(type: "uuid", nullable: false),
                original_qty = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                current_qty = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                batch_number = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                received_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                sell_by_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                use_by_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                receipt_id = table.Column<Guid>(type: "uuid", nullable: false),
                note = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                status = table.Column<int>(type: "integer", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_stocks", x => x.id);
                table.ForeignKey(
                    name: "fk_stocks_locations_location_id",
                    column: x => x.location_id,
                    principalSchema: "warehouse",
                    principalTable: "locations",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stocks_receipt_lines_receipt_id",
                    column: x => x.receipt_id,
                    principalSchema: "warehouse",
                    principalTable: "receipt_lines",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateTable(
            name: "stock_transactions",
            schema: "warehouse",
            columns: table => new
            {
                id = table.Column<Guid>(type: "uuid", nullable: false),
                task_id = table.Column<Guid>(type: "uuid", nullable: false),
                action_type_name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                pos_adjustment = table.Column<bool>(type: "boolean", nullable: false),
                transaction_date = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                transaction_note = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                quantity = table.Column<decimal>(type: "numeric(10,2)", precision: 10, scale: 2, nullable: false),
                product_id = table.Column<Guid>(type: "uuid", nullable: false),
                stock_id = table.Column<Guid>(type: "uuid", nullable: false)
            },
            constraints: table =>
            {
                table.PrimaryKey("pk_stock_transactions", x => x.id);
                table.ForeignKey(
                    name: "fk_stock_transactions_action_types_action_type_name",
                    column: x => x.action_type_name,
                    principalSchema: "warehouse",
                    principalTable: "action_types",
                    principalColumn: "name",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stock_transactions_stocks_stock_id",
                    column: x => x.stock_id,
                    principalSchema: "warehouse",
                    principalTable: "stocks",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
                table.ForeignKey(
                    name: "fk_stock_transactions_tasks_task_id",
                    column: x => x.task_id,
                    principalSchema: "warehouse",
                    principalTable: "tasks",
                    principalColumn: "id",
                    onDelete: ReferentialAction.Cascade);
            });

        migrationBuilder.CreateIndex(
            name: "ix_receipt_lines_receipt_header_id",
            schema: "warehouse",
            table: "receipt_lines",
            column: "receipt_header_id");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_action_type_name",
            schema: "warehouse",
            table: "stock_transactions",
            column: "action_type_name");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_stock_id",
            schema: "warehouse",
            table: "stock_transactions",
            column: "stock_id");

        migrationBuilder.CreateIndex(
            name: "ix_stock_transactions_task_id",
            schema: "warehouse",
            table: "stock_transactions",
            column: "task_id");

        migrationBuilder.CreateIndex(
            name: "ix_stocks_location_id",
            schema: "warehouse",
            table: "stocks",
            column: "location_id");

        migrationBuilder.CreateIndex(
            name: "ix_stocks_receipt_id",
            schema: "warehouse",
            table: "stocks",
            column: "receipt_id");

        migrationBuilder.CreateIndex(
            name: "ix_tasks_task_type_name",
            schema: "warehouse",
            table: "tasks",
            column: "task_type_name");
    }

    /// <inheritdoc />
    protected override void Down(MigrationBuilder migrationBuilder)
    {
        migrationBuilder.DropTable(
            name: "inbox_message_consumers",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "inbox_messages",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "outbox_message_consumers",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "outbox_messages",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "stock_transactions",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "action_types",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "stocks",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "tasks",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "locations",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "receipt_lines",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "task_types",
            schema: "warehouse");

        migrationBuilder.DropTable(
            name: "receipt_headers",
            schema: "warehouse");
    }
}
