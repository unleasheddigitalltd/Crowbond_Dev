// <auto-generated />
using System;
using Crowbond.Modules.Warehouse.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Crowbond.Modules.Warehouse.Infrastructure.Database.Migrations
{
    [DbContext(typeof(WarehouseDbContext))]
    partial class WarehouseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("warehouse")
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Inbox.InboxMessageConsumer", b =>
                {
                    b.Property<Guid>("InboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("inbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("InboxMessageId", "Name")
                        .HasName("pk_inbox_message_consumers");

                    b.ToTable("inbox_message_consumers", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Common.Infrastructure.Outbox.OutboxMessageConsumer", b =>
                {
                    b.Property<Guid>("OutboxMessageId")
                        .HasColumnType("uuid")
                        .HasColumnName("outbox_message_id");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.HasKey("OutboxMessageId", "Name")
                        .HasName("pk_outbox_message_consumers");

                    b.ToTable("outbox_message_consumers", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Locations.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_locations");

                    b.ToTable("locations", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Receipts.ReceiptHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatetimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createtime_stamp");

                    b.Property<string>("DeivaryNoteNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("deivary_note_number");

                    b.Property<Guid>("PurchaseOrderId")
                        .HasColumnType("uuid")
                        .HasColumnName("purchase_order_id");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_receipt_headers");

                    b.ToTable("receipt_headers", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Receipts.ReceiptLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("batch_number");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("QuantityReceived")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity_received");

                    b.Property<Guid>("ReceiptHeaderId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_header_id");

                    b.Property<DateOnly?>("SellByDate")
                        .HasColumnType("date")
                        .HasColumnName("sell_by_date");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateOnly?>("UseByDate")
                        .HasColumnType("date")
                        .HasColumnName("use_by_date");

                    b.HasKey("Id")
                        .HasName("pk_receipt_lines");

                    b.HasIndex("ReceiptHeaderId")
                        .HasDatabaseName("ix_receipt_lines_receipt_header_id");

                    b.ToTable("receipt_lines", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Stocks.ActionType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_action_types");

                    b.ToTable("action_types", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Stocks.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BatchNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("batch_number");

                    b.Property<decimal>("CurrentQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("current_qty");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid")
                        .HasColumnName("location_id");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("note");

                    b.Property<decimal>("OriginalQty")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("original_qty");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<Guid>("ReceiptId")
                        .HasColumnType("uuid")
                        .HasColumnName("receipt_id");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_date");

                    b.Property<DateTime?>("SellByDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sell_by_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UseByDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("use_by_date");

                    b.HasKey("Id")
                        .HasName("pk_stocks");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("ix_stocks_location_id");

                    b.HasIndex("ReceiptId")
                        .HasDatabaseName("ix_stocks_receipt_id");

                    b.ToTable("stocks", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Stocks.StockTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action_type_name");

                    b.Property<bool>("PosAdjustment")
                        .HasColumnType("boolean")
                        .HasColumnName("pos_adjustment");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity");

                    b.Property<Guid>("StockId")
                        .HasColumnType("uuid")
                        .HasColumnName("stock_id");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionNote")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("transaction_note");

                    b.HasKey("Id")
                        .HasName("pk_stock_transactions");

                    b.HasIndex("ActionTypeName")
                        .HasDatabaseName("ix_stock_transactions_action_type_name");

                    b.HasIndex("StockId")
                        .HasDatabaseName("ix_stock_transactions_stock_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_stock_transactions_task_id");

                    b.ToTable("stock_transactions", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Tasks.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("TaskTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("task_type_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("TaskTypeName")
                        .HasDatabaseName("ix_tasks_task_type_name");

                    b.ToTable("tasks", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Tasks.TaskType", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("pk_task_types");

                    b.ToTable("task_types", "warehouse");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Receipts.ReceiptLine", b =>
                {
                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Receipts.ReceiptHeader", null)
                        .WithMany()
                        .HasForeignKey("ReceiptHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_receipt_lines_receipt_headers_receipt_header_id");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Stocks.Stock", b =>
                {
                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stocks_locations_location_id");

                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Receipts.ReceiptLine", null)
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stocks_receipt_lines_receipt_id");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Stocks.StockTransaction", b =>
                {
                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Stocks.ActionType", null)
                        .WithMany()
                        .HasForeignKey("ActionTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transactions_action_types_action_type_name");

                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Stocks.Stock", null)
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transactions_stocks_stock_id");

                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stock_transactions_tasks_task_id");
                });

            modelBuilder.Entity("Crowbond.Modules.Warehouse.Domain.Tasks.Task", b =>
                {
                    b.HasOne("Crowbond.Modules.Warehouse.Domain.Tasks.TaskType", null)
                        .WithMany()
                        .HasForeignKey("TaskTypeName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_task_types_task_type_name");
                });
#pragma warning restore 612, 618
        }
    }
}
